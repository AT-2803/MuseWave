datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Job {
  id            String    @id @default(cuid())
  status        String    @default("pending")
  prompt        String
  duration      Int
  includeVideo  Boolean   @default(false)
  plan          String?
  error         String?
  result        String?
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3)
  parentId      String?
  assetId       String?
  apiKeyId      String?
  dedupeKey     String?
  lastSuccessAt DateTime?
  availableAt   DateTime  @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  backoffMs     Int       @default(1000)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assets        Asset[]
  userId        String?
}

model Asset {
  id        String   @id @default(cuid())
  jobId     String
  type      String
  url       String
  path      String?
  meta      String?
  size      Int?
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id              String      @id @default(cuid())
  key             String      @unique
  name            String?
  userId          String
  rateLimitPerMin Int         @default(60)
  createdAt       DateTime    @default(now())
  rateLimits      RateLimit[]
  usages          Usage[]
}

model RateLimit {
  id           String   @id @default(cuid())
  apiKeyId     String
  windowStart  DateTime
  requestCount Int      @default(0)
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@unique([apiKeyId, windowStart])
}

model Usage {
  id        String   @id @default(cuid())
  apiKeyId  String
  jobId     String?
  action    String
  timestamp DateTime @default(now())
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
}
