datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id              String        @id @default(cuid())
  name            String?
  key             String        @unique
  isActive        Boolean       @default(true)
  rateLimitPerMin Int?          @default(60)
  jobs            Job[]
  rateCounters    RateCounter[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Asset {
  id          String   @id @default(cuid())
  path        String
  mime        String
  durationSec Float?
  sizeBytes   Int?
  meta        String?
  checksum    String?  @unique
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id            String    @id @default(cuid())
  type          String
  status        String    @default("QUEUED")
  params        String
  result        String?
  error         String?
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3)
  parentId      String?
  parent        Job?      @relation("JobToChildren", fields: [parentId], references: [id])
  children      Job[]     @relation("JobToChildren")
  assetId       String?
  asset         Asset?    @relation(fields: [assetId], references: [id])
  apiKeyId      String?
  apiKey        ApiKey?   @relation(fields: [apiKeyId], references: [id])
  dedupeKey     String?
  lastSuccessAt DateTime?
  availableAt   DateTime  @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  backoffMs     Int       @default(2000)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status, availableAt])
  @@index([dedupeKey])
}

model RateCounter {
  id          String   @id @default(cuid())
  apiKeyId    String
  apiKey      ApiKey   @relation(fields: [apiKeyId], references: [id])
  windowStart DateTime
  count       Int
  createdAt   DateTime @default(now())

  @@unique([apiKeyId, windowStart])
}

generator client {
  provider = "prisma-client-js"
}
